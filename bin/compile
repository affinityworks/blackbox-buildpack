#!/usr/bin/env bash

################
## AUTHORSHIP ##
################

# Copyright @aguestuser, affinity.works 2018
# LICENSE: AGPLv3

##############
## PURPOSE: ##
##############

# - runs `blackbox_postdeploy` to decrypt all encrypted files on the heroku filesystem at deploy time


###########
## USAGE ##
###########

# - configure your `app.json` file such that this runs before your app is built
# - all config files encrypted with blackbox will be decrypted before compile time
# - optionally use the `heroku-buildpack-apt` to install gpg2 before this buildpack
# - for instructions on configuring the order of buildpacks, see: https://devcenter.heroku.com/articles/app-json-schema#buildpacks


##################
## DEPENDENCIES ##
##################

# - this buildpack makes a lot of assumptions about dependencies, but tries to provide useful errors if assumptions don't hold. for exmaple, it:
# - assumes you have a private pgp key stored in a config var (w/ `\n` chars at end of lines)
# - assumes that private key has a subkey with no password (as outlined here: https://github.com/StackExchange/blackbox#set-up-automated-users-or-role-accounts)
# - assumes you have `blackbox` in the `/bin` dir of your build directory (provides workaround if not)
# - assumes you have the commands `gpg2`, `gpg-agent`, and `killall` available on your image
#   - this will require the `gnupg2`, `gnupg-agent`, and `psmisc` packages, respectively
#   - this will (likely) require `heroku-buildpack-apt` to support installing deb packages
#   - for docs on the buildpack see: https://elements.heroku.com/buildpacks/heroku/heroku-buildpack-apt)
#   - for example Aptfile with `gnupg2`, `gnupg-agent`, and `psmisc` packages for ubuntu xenial see: https://raw.githubusercontent.com/affinityworks/main/d067a33d4adffa0f87b994e53237d45217ab2f6a/Aptfile


###############
## FUNCTIONS ##
## ############

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

###############
## EXECUTION ##
## ############

pushd `pwd`

echo "--- running BLACKBOX BUILDPACK..."

build_dir=$1
cache_dir=$2
env_dir=$3

# export environment variables from heroku config vars
export_env_dir $env_dir
# change this if you have a different config var name for your private key:
private_key_str=${AFFINITY_HEROKU_PRIVATE_KEY}
# move into home directory of your project
cd $build_dir

###################################

echo "--- importing private key"

# print each line of private key to temp file
# (replacing newline chars w/ linebreaks)
# import private key and delete temp file

if [ -n "$AFFINITY_HEROKU_PRIVATE_KEY" ]
then
  echo "... private key read from memory"
else
  echo "----- [ERROR]: AFFINITY_HEROKU_PRIVATE_KEY not defined"
fi

echo $AFFINITY_HEROKU_PRIVATE_KEY | while read -r X; do echo ${X} | sed 's/\\n/\n/g'>> private.key; done

if [ -e private.key ]
then
  echo "... private key temorarily written to file system"
else
  echo "----- [ERROR]: heroku private key not on filesystem"
fi

echo "... starting gpg-agent"
gpg-agent --daemon # important or else gpg2 calls will fail

gpg2 --import private.key && rm private.key # important to use gpg2 here!

echo "... private key securely stored and removed from file system"

echo "+++ DONE importing private key"

###################################

# NOTE: this buildpack assumes you have blackbox scripts
# under version control in `yourprojectroot/bin`
# if you don't, you could install them and copy them there
# with the following:

# echo "--- installing blackbox"

# mkdir blackbox-tmp
# cd blackbox-tmp
# git clone https://github.com/StackExchange/blackbox.git
# cd blackbox/bin
# for f in `find . -type f -iname "*" ! -iname "Makefile"`; do cp `pwd`/$$f ../../../bin/$$f; done
# cd ../../../
# rm -rf blackbox-tmp

# echo "+++ installed blackbox"

###################################

echo "--- decrypting config files"

if [ -e bin/blackbox_postdeploy ]
then
  echo "... postdeploy script found"
else
  echo "----- [ERROR:] postdeploy script not found"
fi

# enforce gpg2 as per: https://github.com/StackExchange/blackbox/issues/240
GPG=gpg2 bin/blackbox_postdeploy

echo "... shutting down gpg agent"
killall gpg-agent

# debugging commands to use if gpg versions action weird as per above issue

# echo "... UBUNTU VERSNON:"
# lsb_release -a

# echo "...GPG VERSION:"
# gpg --version

echo "+++ DONE decrypting config files"

###################################

echo "+++ BLACKBOX BUILDPACK COMPLETE!"

popd
