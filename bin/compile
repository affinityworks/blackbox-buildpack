#!/usr/bin/env bash

################
## AUTHORSHIP ##
################

# Copyright @aguestuser, 2018
# LICENSE: AGPLv3

##############
## PURPOSE: ##
##############

# - runs `blackbox_postdeploy` to decrypt all encrypted files on the heroku filesystem at deploy time

##########################
## USAGE & DEPENDENCIES ##
##########################

# see README

###############
## FUNCTIONS ##
## ############

# read "config variables" from heroku filesystem into environment

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

###############
## EXECUTION ##
## ############

pushd `pwd`

echo "+++++ BEGINNING blackbox-buildpack"

# capture arguments from caller
build_dir=$1
cache_dir=$2
env_dir=$3

# export environment variables from heroku config vars
export_env_dir $env_dir
# move into home directory of your project
cd $build_dir

###################################

echo "----- checking dependencies"

declare -a commands=("gpg2" "gpg-agent" "killall")
declare -a packages=("gnupg2" "gnupg-agent" "psmisc")

# check for packages needed to run gpg2 without failing on ubuntu 16
for i in ${!commands[@]}
do
  if [ -z `which ${commands[i]}` ]
  then
    echo "----- [ERROR]: Command ${commands[i]} not found. Try adding ${packages[i]} to your Aptfile."
  fi
done


echo "----- importing private key"


# check for presence of private key, alert if not found
if [ -n "$PGP_PRIVATE_KEY_HEROKU" ]
then
  echo "----- private key read from memory"
else
  echo "----- [ERROR]: PGP_PRIVATE_KEY_HEROKU not defined"
fi

echo $PGP_PRIVATE_KEY_HEROKU |
  while read -r X # print each line of private key to temp file
    # replacing special characters w/ actual whitespace
    do echo ${X} | sed 's/\\n/\n/g' | sed 's/\\s/ /g' >> private.key
  done


if [ -e private.key ]
then
  echo "----- private key temorarily written to file system"
else
  echo "----- [ERROR]: heroku private key not on filesystem"
fi

echo "----- starting gpg-agent"

# gpg2 calls require a running gpg-agent, so start one
gpg-agent --daemon

# import private key and delete temp file
# (must use gpg2 to be compatible w/ blackbox)
gpg2 --import private.key && rm private.key

echo "------ private key securely stored and removed from file system"

###################################

# NOTE:
# this buildpack assumes you have blackbox scripts under version control in `projectroot/bin`
# if you don't, you could install them and copy them there with the following:

# echo "--- installing blackbox"

# mkdir blackbox-tmp
# cd blackbox-tmp
# git clone https://github.com/StackExchange/blackbox.git
# cd blackbox/bin
# for f in `find . -type f -iname "*" ! -iname "Makefile"`; do cp `pwd`/$$f ../../../bin/$$f; done
# cd ../../../
# rm -rf blackbox-tmp

# echo "+++ installed blackbox"

###################################

echo "----- decrypting config files"

if [ -e bin/blackbox_postdeploy ]
then
  echo "----- postdeploy script found"
else
  echo "----- [ERROR]: postdeploy script not found"
fi

# enforce gpg2 as per: https://github.com/StackExchange/blackbox/issues/240
GPG=gpg2 bin/blackbox_postdeploy
echo "----- config files decrypted"

# build will hang unless you shut down gpg agent
echo "----- shutting down gpg agent"
killall gpg-agent

# debugging commands to use if gpg versions action weird as per above issue

# echo "----- UBUNTU VERSION:"
# lsb_release -a

# echo "----- GPG VERSION:"
# gpg --version

###################################

echo "+++++ DONE running blackbox-buildpack"

popd
